// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: taskvault.proto

package types

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskvaultClient is the client API for Taskvault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskvaultClient interface {
	CreateValue(ctx context.Context, in *CreateValueRequest, opts ...grpc.CallOption) (*CreateValueResponse, error)
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
	Leave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateValue(ctx context.Context, in *UpdateValueRequest, opts ...grpc.CallOption) (*UpdateValueResponse, error)
	DeleteValue(ctx context.Context, in *DeleteValueRequest, opts ...grpc.CallOption) (*DeleteValueResponse, error)
	RaftGetConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RaftGetConfigurationResponse, error)
	RaftRemovePeerByID(ctx context.Context, in *RaftRemovePeerByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllPairs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllPairsResponse, error)
}

type taskvaultClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskvaultClient(cc grpc.ClientConnInterface) TaskvaultClient {
	return &taskvaultClient{cc}
}

func (c *taskvaultClient) CreateValue(ctx context.Context, in *CreateValueRequest, opts ...grpc.CallOption) (*CreateValueResponse, error) {
	out := new(CreateValueResponse)
	err := c.cc.Invoke(ctx, "/types.Taskvault/CreateValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskvaultClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, "/types.Taskvault/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskvaultClient) Leave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/types.Taskvault/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskvaultClient) UpdateValue(ctx context.Context, in *UpdateValueRequest, opts ...grpc.CallOption) (*UpdateValueResponse, error) {
	out := new(UpdateValueResponse)
	err := c.cc.Invoke(ctx, "/types.Taskvault/UpdateValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskvaultClient) DeleteValue(ctx context.Context, in *DeleteValueRequest, opts ...grpc.CallOption) (*DeleteValueResponse, error) {
	out := new(DeleteValueResponse)
	err := c.cc.Invoke(ctx, "/types.Taskvault/DeleteValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskvaultClient) RaftGetConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RaftGetConfigurationResponse, error) {
	out := new(RaftGetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/types.Taskvault/RaftGetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskvaultClient) RaftRemovePeerByID(ctx context.Context, in *RaftRemovePeerByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/types.Taskvault/RaftRemovePeerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskvaultClient) GetAllPairs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllPairsResponse, error) {
	out := new(GetAllPairsResponse)
	err := c.cc.Invoke(ctx, "/types.Taskvault/GetAllPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskvaultServer is the server API for Taskvault service.
// All implementations must embed UnimplementedTaskvaultServer
// for forward compatibility
type TaskvaultServer interface {
	CreateValue(context.Context, *CreateValueRequest) (*CreateValueResponse, error)
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	Leave(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	UpdateValue(context.Context, *UpdateValueRequest) (*UpdateValueResponse, error)
	DeleteValue(context.Context, *DeleteValueRequest) (*DeleteValueResponse, error)
	RaftGetConfiguration(context.Context, *emptypb.Empty) (*RaftGetConfigurationResponse, error)
	RaftRemovePeerByID(context.Context, *RaftRemovePeerByIDRequest) (*emptypb.Empty, error)
	GetAllPairs(context.Context, *emptypb.Empty) (*GetAllPairsResponse, error)
	mustEmbedUnimplementedTaskvaultServer()
}

// UnimplementedTaskvaultServer must be embedded to have forward compatible implementations.
type UnimplementedTaskvaultServer struct {
}

func (UnimplementedTaskvaultServer) CreateValue(context.Context, *CreateValueRequest) (*CreateValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValue not implemented")
}
func (UnimplementedTaskvaultServer) GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedTaskvaultServer) Leave(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedTaskvaultServer) UpdateValue(context.Context, *UpdateValueRequest) (*UpdateValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}
func (UnimplementedTaskvaultServer) DeleteValue(context.Context, *DeleteValueRequest) (*DeleteValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValue not implemented")
}
func (UnimplementedTaskvaultServer) RaftGetConfiguration(context.Context, *emptypb.Empty) (*RaftGetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftGetConfiguration not implemented")
}
func (UnimplementedTaskvaultServer) RaftRemovePeerByID(context.Context, *RaftRemovePeerByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftRemovePeerByID not implemented")
}
func (UnimplementedTaskvaultServer) GetAllPairs(context.Context, *emptypb.Empty) (*GetAllPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPairs not implemented")
}
func (UnimplementedTaskvaultServer) mustEmbedUnimplementedTaskvaultServer() {}

// UnsafeTaskvaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskvaultServer will
// result in compilation errors.
type UnsafeTaskvaultServer interface {
	mustEmbedUnimplementedTaskvaultServer()
}

func RegisterTaskvaultServer(s grpc.ServiceRegistrar, srv TaskvaultServer) {
	s.RegisterService(&Taskvault_ServiceDesc, srv)
}

func _Taskvault_CreateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).CreateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/CreateValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).CreateValue(ctx, req.(*CreateValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskvault_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskvault_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).Leave(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskvault_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/UpdateValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).UpdateValue(ctx, req.(*UpdateValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskvault_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/DeleteValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).DeleteValue(ctx, req.(*DeleteValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskvault_RaftGetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).RaftGetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/RaftGetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).RaftGetConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskvault_RaftRemovePeerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftRemovePeerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).RaftRemovePeerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/RaftRemovePeerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).RaftRemovePeerByID(ctx, req.(*RaftRemovePeerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskvault_GetAllPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskvaultServer).GetAllPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Taskvault/GetAllPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskvaultServer).GetAllPairs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Taskvault_ServiceDesc is the grpc.ServiceDesc for Taskvault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taskvault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Taskvault",
	HandlerType: (*TaskvaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateValue",
			Handler:    _Taskvault_CreateValue_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _Taskvault_GetValue_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Taskvault_Leave_Handler,
		},
		{
			MethodName: "UpdateValue",
			Handler:    _Taskvault_UpdateValue_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _Taskvault_DeleteValue_Handler,
		},
		{
			MethodName: "RaftGetConfiguration",
			Handler:    _Taskvault_RaftGetConfiguration_Handler,
		},
		{
			MethodName: "RaftRemovePeerByID",
			Handler:    _Taskvault_RaftRemovePeerByID_Handler,
		},
		{
			MethodName: "GetAllPairs",
			Handler:    _Taskvault_GetAllPairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskvault.proto",
}
